/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockErc20Token,
  MockErc20TokenInterface,
} from "../../contracts/MockErc20Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "holders",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001daf38038062001daf8339818101604052810190620000379190620002c2565b818181600390805190602001906200005192919062000075565b5080600490805190602001906200006a92919062000075565b5050505050620003ac565b828054620000839062000376565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018e8262000143565b810181811067ffffffffffffffff82111715620001b057620001af62000154565b5b80604052505050565b6000620001c562000125565b9050620001d3828262000183565b919050565b600067ffffffffffffffff821115620001f657620001f562000154565b5b620002018262000143565b9050602081019050919050565b60005b838110156200022e57808201518184015260208101905062000211565b838111156200023e576000848401525b50505050565b60006200025b6200025584620001d8565b620001b9565b9050828152602081018484840111156200027a57620002796200013e565b5b620002878482856200020e565b509392505050565b600082601f830112620002a757620002a662000139565b5b8151620002b984826020860162000244565b91505092915050565b60008060408385031215620002dc57620002db6200012f565b5b600083015167ffffffffffffffff811115620002fd57620002fc62000134565b5b6200030b858286016200028f565b925050602083015167ffffffffffffffff8111156200032f576200032e62000134565b5b6200033d858286016200028f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038f57607f821691505b60208210811415620003a657620003a562000347565b5b50919050565b6119f380620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c578063a457c2d711610066578063a457c2d714610228578063a9059cbb14610258578063dd62ed3e14610288578063ea66696c146102b8576100cf565b806370a08231146101be57806395d89b41146101ee5780639dc29fac1461020c576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610ef2565b60405180910390f35b61010c60048036038101906101079190610fbc565b610366565b6040516101199190611017565b60405180910390f35b61012a610389565b6040516101379190611041565b60405180910390f35b61015a6004803603810190610155919061105c565b610393565b6040516101679190611017565b60405180910390f35b6101786103c2565b60405161018591906110cb565b60405180910390f35b6101a860048036038101906101a39190610fbc565b6103cb565b6040516101b59190611017565b60405180910390f35b6101d860048036038101906101d391906110e6565b610402565b6040516101e59190611041565b60405180910390f35b6101f661044a565b6040516102039190610ef2565b60405180910390f35b61022660048036038101906102219190610fbc565b6104dc565b005b610242600480360381019061023d9190610fbc565b6104ea565b60405161024f9190611017565b60405180910390f35b610272600480360381019061026d9190610fbc565b610561565b60405161027f9190611017565b60405180910390f35b6102a2600480360381019061029d9190611113565b610584565b6040516102af9190611041565b60405180910390f35b6102d260048036038101906102cd919061129b565b61060b565b005b6060600380546102e390611326565b80601f016020809104026020016040519081016040528092919081815260200182805461030f90611326565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610653565b905061037e81858561065b565b600191505092915050565b6000600254905090565b60008061039e610653565b90506103ab858285610826565b6103b68585856108b2565b60019150509392505050565b60006012905090565b6000806103d6610653565b90506103f78185856103e88589610584565b6103f29190611387565b61065b565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461045990611326565b80601f016020809104026020016040519081016040528092919081815260200182805461048590611326565b80156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b5050505050905090565b6104e68282610b2a565b5050565b6000806104f5610653565b905060006105038286610584565b905083811015610548576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053f9061144f565b60405180910390fd5b610555828686840361065b565b60019250505092915050565b60008061056c610653565b90506105798185856108b2565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60005b825181101561064e5761063b83828151811061062d5761062c61146f565b5b602002602001015183610cf8565b80806106469061149e565b91505061060e565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290611559565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561073b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610732906115eb565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108199190611041565b60405180910390a3505050565b60006108328484610584565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108ac578181101561089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089590611657565b60405180910390fd5b6108ab848484840361065b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919906116e9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109899061177b565b60405180910390fd5b61099d838383610e4f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1a9061180d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b119190611041565b60405180910390a3610b24848484610e54565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b919061189f565b60405180910390fd5b610ba682600083610e4f565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390611931565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cdf9190611041565b60405180910390a3610cf383600084610e54565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5f9061199d565b60405180910390fd5b610d7460008383610e4f565b8060026000828254610d869190611387565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e379190611041565b60405180910390a3610e4b60008383610e54565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e93578082015181840152602081019050610e78565b83811115610ea2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ec482610e59565b610ece8185610e64565b9350610ede818560208601610e75565b610ee781610ea8565b840191505092915050565b60006020820190508181036000830152610f0c8184610eb9565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5382610f28565b9050919050565b610f6381610f48565b8114610f6e57600080fd5b50565b600081359050610f8081610f5a565b92915050565b6000819050919050565b610f9981610f86565b8114610fa457600080fd5b50565b600081359050610fb681610f90565b92915050565b60008060408385031215610fd357610fd2610f1e565b5b6000610fe185828601610f71565b9250506020610ff285828601610fa7565b9150509250929050565b60008115159050919050565b61101181610ffc565b82525050565b600060208201905061102c6000830184611008565b92915050565b61103b81610f86565b82525050565b60006020820190506110566000830184611032565b92915050565b60008060006060848603121561107557611074610f1e565b5b600061108386828701610f71565b935050602061109486828701610f71565b92505060406110a586828701610fa7565b9150509250925092565b600060ff82169050919050565b6110c5816110af565b82525050565b60006020820190506110e060008301846110bc565b92915050565b6000602082840312156110fc576110fb610f1e565b5b600061110a84828501610f71565b91505092915050565b6000806040838503121561112a57611129610f1e565b5b600061113885828601610f71565b925050602061114985828601610f71565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61119082610ea8565b810181811067ffffffffffffffff821117156111af576111ae611158565b5b80604052505050565b60006111c2610f14565b90506111ce8282611187565b919050565b600067ffffffffffffffff8211156111ee576111ed611158565b5b602082029050602081019050919050565b600080fd5b6000611217611212846111d3565b6111b8565b9050808382526020820190506020840283018581111561123a576112396111ff565b5b835b81811015611263578061124f8882610f71565b84526020840193505060208101905061123c565b5050509392505050565b600082601f83011261128257611281611153565b5b8135611292848260208601611204565b91505092915050565b600080604083850312156112b2576112b1610f1e565b5b600083013567ffffffffffffffff8111156112d0576112cf610f23565b5b6112dc8582860161126d565b92505060206112ed85828601610fa7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061133e57607f821691505b60208210811415611352576113516112f7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061139282610f86565b915061139d83610f86565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113d2576113d1611358565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611439602583610e64565b9150611444826113dd565b604082019050919050565b600060208201905081810360008301526114688161142c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006114a982610f86565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156114dc576114db611358565b5b600182019050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611543602483610e64565b915061154e826114e7565b604082019050919050565b6000602082019050818103600083015261157281611536565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006115d5602283610e64565b91506115e082611579565b604082019050919050565b60006020820190508181036000830152611604816115c8565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611641601d83610e64565b915061164c8261160b565b602082019050919050565b6000602082019050818103600083015261167081611634565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006116d3602583610e64565b91506116de82611677565b604082019050919050565b60006020820190508181036000830152611702816116c6565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611765602383610e64565b915061177082611709565b604082019050919050565b6000602082019050818103600083015261179481611758565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006117f7602683610e64565b91506118028261179b565b604082019050919050565b60006020820190508181036000830152611826816117ea565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611889602183610e64565b91506118948261182d565b604082019050919050565b600060208201905081810360008301526118b88161187c565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061191b602283610e64565b9150611926826118bf565b604082019050919050565b6000602082019050818103600083015261194a8161190e565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611987601f83610e64565b915061199282611951565b602082019050919050565b600060208201905081810360008301526119b68161197a565b905091905056fea2646970667358221220d5980acfe81a7f186918d6b3fc9df101f1597bdf78cfd9ea845b127fd563a30e64736f6c63430008090033";

type MockErc20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockErc20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockErc20Token__factory extends ContractFactory {
  constructor(...args: MockErc20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockErc20Token> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<MockErc20Token>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MockErc20Token {
    return super.attach(address) as MockErc20Token;
  }
  override connect(signer: Signer): MockErc20Token__factory {
    return super.connect(signer) as MockErc20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockErc20TokenInterface {
    return new utils.Interface(_abi) as MockErc20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockErc20Token {
    return new Contract(address, _abi, signerOrProvider) as MockErc20Token;
  }
}
