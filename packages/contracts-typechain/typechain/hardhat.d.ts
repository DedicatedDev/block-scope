/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC5267Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BlockScopePayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockScopePayment__factory>;
    getContractFactory(
      name: "BlockScopeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockScopeToken__factory>;
    getContractFactory(
      name: "BlockScopeVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockScopeVesting__factory>;
    getContractFactory(
      name: "IBlockScopePayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockScopePayment__factory>;
    getContractFactory(
      name: "IBlockScopeVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlockScopeVesting__factory>;
    getContractFactory(
      name: "IOwnablePausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOwnablePausable__factory>;
    getContractFactory(
      name: "OwnablePausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnablePausableUpgradeable__factory>;
    getContractFactory(
      name: "BlockScopePaymentV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlockScopePaymentV2__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC5267Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BlockScopePayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockScopePayment>;
    getContractAt(
      name: "BlockScopeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockScopeToken>;
    getContractAt(
      name: "BlockScopeVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockScopeVesting>;
    getContractAt(
      name: "IBlockScopePayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockScopePayment>;
    getContractAt(
      name: "IBlockScopeVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlockScopeVesting>;
    getContractAt(
      name: "IOwnablePausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOwnablePausable>;
    getContractAt(
      name: "OwnablePausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnablePausableUpgradeable>;
    getContractAt(
      name: "BlockScopePaymentV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlockScopePaymentV2>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
